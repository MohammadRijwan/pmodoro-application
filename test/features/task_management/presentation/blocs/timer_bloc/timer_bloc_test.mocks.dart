// Mocks generated by Mockito 5.3.2 from annotations
// in pomodore/test/features/task_management/presentation/blocs/timer_bloc/timer_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:pomodore/core/resources/params/timer_state_params.dart' as _i8;
import 'package:pomodore/features/task_management/domain/entities/pomodoro_entity.dart'
    as _i6;
import 'package:pomodore/features/task_management/domain/repositories/timer_repository.dart'
    as _i3;
import 'package:pomodore/features/task_management/domain/usecases/add_pomodoro_to_db_usecase.dart'
    as _i4;
import 'package:pomodore/features/task_management/domain/usecases/restore_timer_state_usecase.dart'
    as _i7;
import 'package:pomodore/features/task_management/domain/usecases/save_timer_state_usecase.dart'
    as _i9;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeTimerRepository_1 extends _i1.SmartFake
    implements _i3.TimerRepository {
  _FakeTimerRepository_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [AddPomodoroToDbUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockAddPomodoroToDbUseCase extends _i1.Mock
    implements _i4.AddPomodoroToDbUseCase {
  MockAddPomodoroToDbUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i2.Either<String, bool>> call({_i6.PomodoroEntity? params}) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
          {#params: params},
        ),
        returnValue: _i5.Future<_i2.Either<String, bool>>.value(
            _FakeEither_0<String, bool>(
          this,
          Invocation.method(
            #call,
            [],
            {#params: params},
          ),
        )),
      ) as _i5.Future<_i2.Either<String, bool>>);
}

/// A class which mocks [RestoreTimerStateUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockRestoreTimerStateUseCase extends _i1.Mock
    implements _i7.RestoreTimerStateUseCase {
  MockRestoreTimerStateUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.TimerRepository get timerRepository => (super.noSuchMethod(
        Invocation.getter(#timerRepository),
        returnValue: _FakeTimerRepository_1(
          this,
          Invocation.getter(#timerRepository),
        ),
      ) as _i3.TimerRepository);
  @override
  _i5.Future<_i2.Either<String, _i8.TimerStateParams>> call({int? params}) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
          {#params: params},
        ),
        returnValue: _i5.Future<_i2.Either<String, _i8.TimerStateParams>>.value(
            _FakeEither_0<String, _i8.TimerStateParams>(
          this,
          Invocation.method(
            #call,
            [],
            {#params: params},
          ),
        )),
      ) as _i5.Future<_i2.Either<String, _i8.TimerStateParams>>);
}

/// A class which mocks [SaveTimerStateUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockSaveTimerStateUseCase extends _i1.Mock
    implements _i9.SaveTimerStateUseCase {
  MockSaveTimerStateUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.TimerRepository get timerRepository => (super.noSuchMethod(
        Invocation.getter(#timerRepository),
        returnValue: _FakeTimerRepository_1(
          this,
          Invocation.getter(#timerRepository),
        ),
      ) as _i3.TimerRepository);
  @override
  _i5.Future<_i2.Either<String, int>> call({_i8.TimerStateParams? params}) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
          {#params: params},
        ),
        returnValue: _i5.Future<_i2.Either<String, int>>.value(
            _FakeEither_0<String, int>(
          this,
          Invocation.method(
            #call,
            [],
            {#params: params},
          ),
        )),
      ) as _i5.Future<_i2.Either<String, int>>);
}
