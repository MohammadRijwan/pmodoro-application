// Mocks generated by Mockito 5.3.2 from annotations
// in pomodore/test/features/configuration/presentation/blocs/settings_bloc/settings_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:dartz/dartz.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:pomodore/core/resources/params/settings_params.dart' as _i8;
import 'package:pomodore/features/configuration/domain/entities/settings_entity.dart'
    as _i6;
import 'package:pomodore/features/configuration/domain/repositories/settings_repository.dart'
    as _i2;
import 'package:pomodore/features/configuration/domain/usecases/change_settings_usecase.dart'
    as _i7;
import 'package:pomodore/features/configuration/domain/usecases/get_settings_usecase.dart'
    as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeSettingsRepository_0 extends _i1.SmartFake
    implements _i2.SettingsRepository {
  _FakeSettingsRepository_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEither_1<L, R> extends _i1.SmartFake implements _i3.Either<L, R> {
  _FakeEither_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [GetSettingsUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetSettingsUseCase extends _i1.Mock
    implements _i4.GetSettingsUseCase {
  MockGetSettingsUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.SettingsRepository get settingsRepository => (super.noSuchMethod(
        Invocation.getter(#settingsRepository),
        returnValue: _FakeSettingsRepository_0(
          this,
          Invocation.getter(#settingsRepository),
        ),
      ) as _i2.SettingsRepository);
  @override
  _i5.Future<_i3.Either<String, _i6.SettingsEntity>> call({String? params}) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
          {#params: params},
        ),
        returnValue: _i5.Future<_i3.Either<String, _i6.SettingsEntity>>.value(
            _FakeEither_1<String, _i6.SettingsEntity>(
          this,
          Invocation.method(
            #call,
            [],
            {#params: params},
          ),
        )),
      ) as _i5.Future<_i3.Either<String, _i6.SettingsEntity>>);
}

/// A class which mocks [ChangeSettingsUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockChangeSettingsUseCase extends _i1.Mock
    implements _i7.ChangeSettingsUseCase {
  MockChangeSettingsUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.SettingsRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeSettingsRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.SettingsRepository);
  @override
  _i5.Future<_i3.Either<String, _i6.SettingsEntity>> call(
          {_i8.ChangeSettingsParams? params}) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
          {#params: params},
        ),
        returnValue: _i5.Future<_i3.Either<String, _i6.SettingsEntity>>.value(
            _FakeEither_1<String, _i6.SettingsEntity>(
          this,
          Invocation.method(
            #call,
            [],
            {#params: params},
          ),
        )),
      ) as _i5.Future<_i3.Either<String, _i6.SettingsEntity>>);
}
